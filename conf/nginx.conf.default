daemon off;
worker_processes auto;
error_log stderr {{ NGINX_LOG_LEVEL or "notice" }};

events {
  worker_connections {{ NGINX_WORKER_CONNECTIONS or "10000" }};
  multi_accept on;
}

http {
  log_format combined '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent"';
  access_log /dev/stdout combined;

  sendfile              on;
  tcp_nopush            on;
  tcp_nodelay           on;
  keepalive_requests    {{ NGINX_KEEPALIVE_REQUESTS or "10000" }};
  keepalive_timeout     {{ NGINX_KEEPALIVE_TIMEOUT or "75s" }};
  client_header_timeout {{ NGINX_CLIENT_HEADER_TIMEOUT or "75s" }};
  client_body_timeout   {{ NGINX_CLIENT_BODY_TIMEOUT or "75s" }};
  client_max_body_size  {{ NGINX_CLIENT_MAX_BODY_SIZE or "1m" }};
  types_hash_max_size   2048;
  resolver {{ NGINX_RESOLVER or "8.8.8.8" }} valid={{ NGINX_RESOLVER_VALID or "300s" }};
  set_real_ip_from 10.0.0.0/8;
  real_ip_recursive on;
  real_ip_header X-Forwarded-For;

  include mime.types;
  default_type {{ NGINX_DEFAULT_TYPE or "application/octet-stream" }};

  lua_package_path "{{ LUA_PACKAGE_PATH }};;$prefix../luarocks/share/lua/5.1/?.lua;$prefix../luarocks/share/lua/5.1/?/init.lua";
  lua_package_cpath ";;$prefix../luarocks/lib/lua/5.1/?.so";

  lua_ssl_trusted_certificate "{{ LUA_SSL_TRUSTED_CERTIFICATE or '/etc/ssl/certs/ca-certificates.crt' }}";

  lua_socket_pool_size {{ LUA_SOCKET_POOL_SIZE or "400" }};
  lua_socket_keepalive_timeout {{ LUA_SOCKET_KEEPALIVE_TIMEOUT or "75s" }};

  init_worker_by_lua_block {
    ngx.log(ngx.NOTICE, "Listening on PORT={{ PORT }}")
  }

  server {
    listen {{ PORT }} default_server reuseport backlog={{ NGINX_LISTEN_BACKLOG or "10000" }};
    listen [::]:{{ PORT }} default_server reuseport backlog={{ NGINX_LISTEN_BACKLOG or "10000" }};
    server_name {{ NGINX_SERVER_NAME or "_" }};
    expires {{ NGINX_DEFAULT_EXPIRES or "-1d" }};

    location / {
      default_type text/plain;

      content_by_lua_block {
        ngx.say("Hello OpenResty!")
      }      
    }
  }
}
